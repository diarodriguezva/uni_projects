/* Auto-generated by genmsg_cpp for file /home/pcnao02/fuerte_workspace/sandbox/BILHR_ros/msg/JointState.msg */
#ifndef BILHR_ROS_MESSAGE_JOINTSTATE_H
#define BILHR_ROS_MESSAGE_JOINTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace BILHR_ros
{
template <class ContainerAllocator>
struct JointState_ {
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
  : header()
  , name()
  , position()
  , velocity()
  , effort()
  {
  }

  JointState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , effort(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  position;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  velocity;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  effort;


  typedef boost::shared_ptr< ::BILHR_ros::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BILHR_ros::JointState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointState
typedef  ::BILHR_ros::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::BILHR_ros::JointState> JointStatePtr;
typedef boost::shared_ptr< ::BILHR_ros::JointState const> JointStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::BILHR_ros::JointState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::BILHR_ros::JointState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace BILHR_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::BILHR_ros::JointState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::BILHR_ros::JointState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::BILHR_ros::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3066dcd76a6cfaef579bd0f34173e9fd";
  }

  static const char* value(const  ::BILHR_ros::JointState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3066dcd76a6cfaefULL;
  static const uint64_t static_value2 = 0x579bd0f34173e9fdULL;
};

template<class ContainerAllocator>
struct DataType< ::BILHR_ros::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BILHR_ros/JointState";
  }

  static const char* value(const  ::BILHR_ros::JointState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::BILHR_ros::JointState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::BILHR_ros::JointState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::BILHR_ros::JointState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::BILHR_ros::JointState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::BILHR_ros::JointState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.effort);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BILHR_ros::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::BILHR_ros::JointState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BILHR_ROS_MESSAGE_JOINTSTATE_H

