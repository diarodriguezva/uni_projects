/* Auto-generated by genmsg_cpp for file /home/pcnao02/fuerte_workspace/sandbox/BILHR_ros/msg/TactileTouch.msg */
#ifndef BILHR_ROS_MESSAGE_TACTILETOUCH_H
#define BILHR_ROS_MESSAGE_TACTILETOUCH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace BILHR_ros
{
template <class ContainerAllocator>
struct TactileTouch_ {
  typedef TactileTouch_<ContainerAllocator> Type;

  TactileTouch_()
  : button(0)
  , state(0)
  {
  }

  TactileTouch_(const ContainerAllocator& _alloc)
  : button(0)
  , state(0)
  {
  }

  typedef uint8_t _button_type;
  uint8_t button;

  typedef uint8_t _state_type;
  uint8_t state;

  enum { buttonFront = 1 };
  enum { buttonMiddle = 2 };
  enum { buttonRear = 3 };
  enum { stateReleased = 0 };
  enum { statePressed = 1 };

  typedef boost::shared_ptr< ::BILHR_ros::TactileTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BILHR_ros::TactileTouch_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TactileTouch
typedef  ::BILHR_ros::TactileTouch_<std::allocator<void> > TactileTouch;

typedef boost::shared_ptr< ::BILHR_ros::TactileTouch> TactileTouchPtr;
typedef boost::shared_ptr< ::BILHR_ros::TactileTouch const> TactileTouchConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::BILHR_ros::TactileTouch_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::BILHR_ros::TactileTouch_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace BILHR_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::BILHR_ros::TactileTouch_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::BILHR_ros::TactileTouch_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::BILHR_ros::TactileTouch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b75165bf9dfed26d50ad4e3162304225";
  }

  static const char* value(const  ::BILHR_ros::TactileTouch_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb75165bf9dfed26dULL;
  static const uint64_t static_value2 = 0x50ad4e3162304225ULL;
};

template<class ContainerAllocator>
struct DataType< ::BILHR_ros::TactileTouch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "BILHR_ros/TactileTouch";
  }

  static const char* value(const  ::BILHR_ros::TactileTouch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::BILHR_ros::TactileTouch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# From ROS package from Uni Freiburg\n\
# A message for Nao's tactile interface (touch buttons on the head)\n\
\n\
uint8 button            # which of the three segments is touched\n\
uint8 state             # pressed or released, see below\n\
\n\
uint8 buttonFront=1\n\
uint8 buttonMiddle=2\n\
uint8 buttonRear=3\n\
\n\
uint8 stateReleased=0\n\
uint8 statePressed=1\n\
\n\
";
  }

  static const char* value(const  ::BILHR_ros::TactileTouch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::BILHR_ros::TactileTouch_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::BILHR_ros::TactileTouch_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.button);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TactileTouch_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BILHR_ros::TactileTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::BILHR_ros::TactileTouch_<ContainerAllocator> & v) 
  {
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BILHR_ROS_MESSAGE_TACTILETOUCH_H

