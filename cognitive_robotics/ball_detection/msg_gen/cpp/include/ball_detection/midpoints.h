/* Auto-generated by genmsg_cpp for file /home/diego/fuerte_workspace/sandbox/Cognitive/ball_detection/msg/midpoints.msg */
#ifndef BALL_DETECTION_MESSAGE_MIDPOINTS_H
#define BALL_DETECTION_MESSAGE_MIDPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ball_detection
{
template <class ContainerAllocator>
struct midpoints_ {
  typedef midpoints_<ContainerAllocator> Type;

  midpoints_()
  : x_blue(0)
  , y_blue(0)
  , x_yellow(0)
  , y_yellow(0)
  , x_red(0)
  , y_red(0)
  , x_green(0)
  , y_green(0)
  {
  }

  midpoints_(const ContainerAllocator& _alloc)
  : x_blue(0)
  , y_blue(0)
  , x_yellow(0)
  , y_yellow(0)
  , x_red(0)
  , y_red(0)
  , x_green(0)
  , y_green(0)
  {
  }

  typedef int32_t _x_blue_type;
  int32_t x_blue;

  typedef int32_t _y_blue_type;
  int32_t y_blue;

  typedef int32_t _x_yellow_type;
  int32_t x_yellow;

  typedef int32_t _y_yellow_type;
  int32_t y_yellow;

  typedef int32_t _x_red_type;
  int32_t x_red;

  typedef int32_t _y_red_type;
  int32_t y_red;

  typedef int32_t _x_green_type;
  int32_t x_green;

  typedef int32_t _y_green_type;
  int32_t y_green;


  typedef boost::shared_ptr< ::ball_detection::midpoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ball_detection::midpoints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct midpoints
typedef  ::ball_detection::midpoints_<std::allocator<void> > midpoints;

typedef boost::shared_ptr< ::ball_detection::midpoints> midpointsPtr;
typedef boost::shared_ptr< ::ball_detection::midpoints const> midpointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ball_detection::midpoints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ball_detection::midpoints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ball_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ball_detection::midpoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ball_detection::midpoints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ball_detection::midpoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c49b7ac74776a47d415a17d96ee8bc0b";
  }

  static const char* value(const  ::ball_detection::midpoints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc49b7ac74776a47dULL;
  static const uint64_t static_value2 = 0x415a17d96ee8bc0bULL;
};

template<class ContainerAllocator>
struct DataType< ::ball_detection::midpoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ball_detection/midpoints";
  }

  static const char* value(const  ::ball_detection::midpoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ball_detection::midpoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 x_blue\n\
int32 y_blue\n\
int32 x_yellow\n\
int32 y_yellow\n\
int32 x_red\n\
int32 y_red\n\
int32 x_green\n\
int32 y_green\n\
\n\
";
  }

  static const char* value(const  ::ball_detection::midpoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ball_detection::midpoints_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ball_detection::midpoints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_blue);
    stream.next(m.y_blue);
    stream.next(m.x_yellow);
    stream.next(m.y_yellow);
    stream.next(m.x_red);
    stream.next(m.y_red);
    stream.next(m.x_green);
    stream.next(m.y_green);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct midpoints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ball_detection::midpoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ball_detection::midpoints_<ContainerAllocator> & v) 
  {
    s << indent << "x_blue: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_blue);
    s << indent << "y_blue: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_blue);
    s << indent << "x_yellow: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_yellow);
    s << indent << "y_yellow: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_yellow);
    s << indent << "x_red: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_red);
    s << indent << "y_red: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_red);
    s << indent << "x_green: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_green);
    s << indent << "y_green: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_green);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BALL_DETECTION_MESSAGE_MIDPOINTS_H

