/* Auto-generated by genmsg_cpp for file /home/diego/fuerte_workspace/sandbox/Cognitive/robot_control/srv/MoveJoints.srv */
#ifndef ROBOT_CONTROL_SERVICE_MOVEJOINTS_H
#define ROBOT_CONTROL_SERVICE_MOVEJOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robot_control
{
template <class ContainerAllocator>
struct MoveJointsRequest_ {
  typedef MoveJointsRequest_<ContainerAllocator> Type;

  MoveJointsRequest_()
  : q0(0.0)
  , q1(0.0)
  , q2(0.0)
  {
  }

  MoveJointsRequest_(const ContainerAllocator& _alloc)
  : q0(0.0)
  , q1(0.0)
  , q2(0.0)
  {
  }

  typedef float _q0_type;
  float q0;

  typedef float _q1_type;
  float q1;

  typedef float _q2_type;
  float q2;


  typedef boost::shared_ptr< ::robot_control::MoveJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::MoveJointsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveJointsRequest
typedef  ::robot_control::MoveJointsRequest_<std::allocator<void> > MoveJointsRequest;

typedef boost::shared_ptr< ::robot_control::MoveJointsRequest> MoveJointsRequestPtr;
typedef boost::shared_ptr< ::robot_control::MoveJointsRequest const> MoveJointsRequestConstPtr;


template <class ContainerAllocator>
struct MoveJointsResponse_ {
  typedef MoveJointsResponse_<ContainerAllocator> Type;

  MoveJointsResponse_()
  : success(false)
  {
  }

  MoveJointsResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::robot_control::MoveJointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::MoveJointsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveJointsResponse
typedef  ::robot_control::MoveJointsResponse_<std::allocator<void> > MoveJointsResponse;

typedef boost::shared_ptr< ::robot_control::MoveJointsResponse> MoveJointsResponsePtr;
typedef boost::shared_ptr< ::robot_control::MoveJointsResponse const> MoveJointsResponseConstPtr;

struct MoveJoints
{

typedef MoveJointsRequest Request;
typedef MoveJointsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveJoints
} // namespace robot_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_control::MoveJointsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_control::MoveJointsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_control::MoveJointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0565ee57b25698796c9e8e305dbe406";
  }

  static const char* value(const  ::robot_control::MoveJointsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe0565ee57b256987ULL;
  static const uint64_t static_value2 = 0x96c9e8e305dbe406ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::MoveJointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_control/MoveJointsRequest";
  }

  static const char* value(const  ::robot_control::MoveJointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_control::MoveJointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 q0\n\
float32 q1\n\
float32 q2\n\
\n\
";
  }

  static const char* value(const  ::robot_control::MoveJointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_control::MoveJointsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot_control::MoveJointsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot_control::MoveJointsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot_control::MoveJointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::robot_control::MoveJointsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::MoveJointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_control/MoveJointsResponse";
  }

  static const char* value(const  ::robot_control::MoveJointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot_control::MoveJointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::robot_control::MoveJointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot_control::MoveJointsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_control::MoveJointsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.q0);
    stream.next(m.q1);
    stream.next(m.q2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveJointsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot_control::MoveJointsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveJointsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robot_control::MoveJoints> {
  static const char* value() 
  {
    return "6dd2c5f72a36c3acb7d0518051b7b56e";
  }

  static const char* value(const robot_control::MoveJoints&) { return value(); } 
};

template<>
struct DataType<robot_control::MoveJoints> {
  static const char* value() 
  {
    return "robot_control/MoveJoints";
  }

  static const char* value(const robot_control::MoveJoints&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_control::MoveJointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6dd2c5f72a36c3acb7d0518051b7b56e";
  }

  static const char* value(const robot_control::MoveJointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_control::MoveJointsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_control/MoveJoints";
  }

  static const char* value(const robot_control::MoveJointsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robot_control::MoveJointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6dd2c5f72a36c3acb7d0518051b7b56e";
  }

  static const char* value(const robot_control::MoveJointsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robot_control::MoveJointsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot_control/MoveJoints";
  }

  static const char* value(const robot_control::MoveJointsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBOT_CONTROL_SERVICE_MOVEJOINTS_H

