// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cf/r0/proto/RobotTask.proto

#ifndef PROTOBUF_cf_2fr0_2fproto_2fRobotTask_2eproto__INCLUDED
#define PROTOBUF_cf_2fr0_2fproto_2fRobotTask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cf/r0/proto/MoveTask.pb.h"
#include "cf/r0/proto/GetPositionTask.pb.h"
#include "cf/r0/proto/GetConfigurationTask.pb.h"
#include "cf/r0/proto/SetConfigurationTask.pb.h"
#include "cf/r0/proto/SetJointsTask.pb.h"
#include "cf/r0/proto/EnableTorqueTask.pb.h"
// @@protoc_insertion_point(includes)

namespace cf {
namespace r0 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
void protobuf_AssignDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
void protobuf_ShutdownFile_cf_2fr0_2fproto_2fRobotTask_2eproto();

class RobotTaskRequest;
class RobotTaskResponse;

enum RobotTaskRequest_Type {
  RobotTaskRequest_Type_MOVE = 1,
  RobotTaskRequest_Type_GETPOSITION = 2,
  RobotTaskRequest_Type_GETCONFIGURATION = 3,
  RobotTaskRequest_Type_SETCONFIGURATION = 4,
  RobotTaskRequest_Type_SETJOINTS = 5,
  RobotTaskRequest_Type_ENABLETORQUE = 6,
  RobotTaskRequest_Type_EXTENSION = 7
};
bool RobotTaskRequest_Type_IsValid(int value);
const RobotTaskRequest_Type RobotTaskRequest_Type_Type_MIN = RobotTaskRequest_Type_MOVE;
const RobotTaskRequest_Type RobotTaskRequest_Type_Type_MAX = RobotTaskRequest_Type_EXTENSION;
const int RobotTaskRequest_Type_Type_ARRAYSIZE = RobotTaskRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotTaskRequest_Type_descriptor();
inline const ::std::string& RobotTaskRequest_Type_Name(RobotTaskRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotTaskRequest_Type_descriptor(), value);
}
inline bool RobotTaskRequest_Type_Parse(
    const ::std::string& name, RobotTaskRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotTaskRequest_Type>(
    RobotTaskRequest_Type_descriptor(), name, value);
}
// ===================================================================

class RobotTaskRequest : public ::google::protobuf::Message {
 public:
  RobotTaskRequest();
  virtual ~RobotTaskRequest();

  RobotTaskRequest(const RobotTaskRequest& from);

  inline RobotTaskRequest& operator=(const RobotTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotTaskRequest& default_instance();

  void Swap(RobotTaskRequest* other);

  // implements Message ----------------------------------------------

  RobotTaskRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotTaskRequest& from);
  void MergeFrom(const RobotTaskRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RobotTaskRequest_Type Type;
  static const Type MOVE = RobotTaskRequest_Type_MOVE;
  static const Type GETPOSITION = RobotTaskRequest_Type_GETPOSITION;
  static const Type GETCONFIGURATION = RobotTaskRequest_Type_GETCONFIGURATION;
  static const Type SETCONFIGURATION = RobotTaskRequest_Type_SETCONFIGURATION;
  static const Type SETJOINTS = RobotTaskRequest_Type_SETJOINTS;
  static const Type ENABLETORQUE = RobotTaskRequest_Type_ENABLETORQUE;
  static const Type EXTENSION = RobotTaskRequest_Type_EXTENSION;
  static inline bool Type_IsValid(int value) {
    return RobotTaskRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RobotTaskRequest_Type_Type_MIN;
  static const Type Type_MAX =
    RobotTaskRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RobotTaskRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RobotTaskRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RobotTaskRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RobotTaskRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cf.r0.proto.RobotTaskRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cf::r0::proto::RobotTaskRequest_Type type() const;
  inline void set_type(::cf::r0::proto::RobotTaskRequest_Type value);

  // required uint32 sequence_number = 2;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint32 value);

  // optional .cf.r0.proto.MoveTaskRequest move_task = 3;
  inline bool has_move_task() const;
  inline void clear_move_task();
  static const int kMoveTaskFieldNumber = 3;
  inline const ::cf::r0::proto::MoveTaskRequest& move_task() const;
  inline ::cf::r0::proto::MoveTaskRequest* mutable_move_task();
  inline ::cf::r0::proto::MoveTaskRequest* release_move_task();
  inline void set_allocated_move_task(::cf::r0::proto::MoveTaskRequest* move_task);

  // optional .cf.r0.proto.GetPositionTaskRequest position_task = 4;
  inline bool has_position_task() const;
  inline void clear_position_task();
  static const int kPositionTaskFieldNumber = 4;
  inline const ::cf::r0::proto::GetPositionTaskRequest& position_task() const;
  inline ::cf::r0::proto::GetPositionTaskRequest* mutable_position_task();
  inline ::cf::r0::proto::GetPositionTaskRequest* release_position_task();
  inline void set_allocated_position_task(::cf::r0::proto::GetPositionTaskRequest* position_task);

  // optional .cf.r0.proto.GetConfigurationTaskRequest get_config_task = 5;
  inline bool has_get_config_task() const;
  inline void clear_get_config_task();
  static const int kGetConfigTaskFieldNumber = 5;
  inline const ::cf::r0::proto::GetConfigurationTaskRequest& get_config_task() const;
  inline ::cf::r0::proto::GetConfigurationTaskRequest* mutable_get_config_task();
  inline ::cf::r0::proto::GetConfigurationTaskRequest* release_get_config_task();
  inline void set_allocated_get_config_task(::cf::r0::proto::GetConfigurationTaskRequest* get_config_task);

  // optional .cf.r0.proto.SetConfigurationTaskRequest set_config_task = 6;
  inline bool has_set_config_task() const;
  inline void clear_set_config_task();
  static const int kSetConfigTaskFieldNumber = 6;
  inline const ::cf::r0::proto::SetConfigurationTaskRequest& set_config_task() const;
  inline ::cf::r0::proto::SetConfigurationTaskRequest* mutable_set_config_task();
  inline ::cf::r0::proto::SetConfigurationTaskRequest* release_set_config_task();
  inline void set_allocated_set_config_task(::cf::r0::proto::SetConfigurationTaskRequest* set_config_task);

  // optional .cf.r0.proto.SetJointsTaskRequest set_joints_task = 7;
  inline bool has_set_joints_task() const;
  inline void clear_set_joints_task();
  static const int kSetJointsTaskFieldNumber = 7;
  inline const ::cf::r0::proto::SetJointsTaskRequest& set_joints_task() const;
  inline ::cf::r0::proto::SetJointsTaskRequest* mutable_set_joints_task();
  inline ::cf::r0::proto::SetJointsTaskRequest* release_set_joints_task();
  inline void set_allocated_set_joints_task(::cf::r0::proto::SetJointsTaskRequest* set_joints_task);

  // optional .cf.r0.proto.EnableTorqueTaskRequest enable_torque_task = 8;
  inline bool has_enable_torque_task() const;
  inline void clear_enable_torque_task();
  static const int kEnableTorqueTaskFieldNumber = 8;
  inline const ::cf::r0::proto::EnableTorqueTaskRequest& enable_torque_task() const;
  inline ::cf::r0::proto::EnableTorqueTaskRequest* mutable_enable_torque_task();
  inline ::cf::r0::proto::EnableTorqueTaskRequest* release_enable_torque_task();
  inline void set_allocated_enable_torque_task(::cf::r0::proto::EnableTorqueTaskRequest* enable_torque_task);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RobotTaskRequest)
  // @@protoc_insertion_point(class_scope:cf.r0.proto.RobotTaskRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_move_task();
  inline void clear_has_move_task();
  inline void set_has_position_task();
  inline void clear_has_position_task();
  inline void set_has_get_config_task();
  inline void clear_has_get_config_task();
  inline void set_has_set_config_task();
  inline void clear_has_set_config_task();
  inline void set_has_set_joints_task();
  inline void clear_has_set_joints_task();
  inline void set_has_enable_torque_task();
  inline void clear_has_enable_torque_task();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 sequence_number_;
  ::cf::r0::proto::MoveTaskRequest* move_task_;
  ::cf::r0::proto::GetPositionTaskRequest* position_task_;
  ::cf::r0::proto::GetConfigurationTaskRequest* get_config_task_;
  ::cf::r0::proto::SetConfigurationTaskRequest* set_config_task_;
  ::cf::r0::proto::SetJointsTaskRequest* set_joints_task_;
  ::cf::r0::proto::EnableTorqueTaskRequest* enable_torque_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
  friend void protobuf_AssignDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
  friend void protobuf_ShutdownFile_cf_2fr0_2fproto_2fRobotTask_2eproto();

  void InitAsDefaultInstance();
  static RobotTaskRequest* default_instance_;
};
// -------------------------------------------------------------------

class RobotTaskResponse : public ::google::protobuf::Message {
 public:
  RobotTaskResponse();
  virtual ~RobotTaskResponse();

  RobotTaskResponse(const RobotTaskResponse& from);

  inline RobotTaskResponse& operator=(const RobotTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotTaskResponse& default_instance();

  void Swap(RobotTaskResponse* other);

  // implements Message ----------------------------------------------

  RobotTaskResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotTaskResponse& from);
  void MergeFrom(const RobotTaskResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cf.r0.proto.RobotTaskRequest.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cf::r0::proto::RobotTaskRequest_Type type() const;
  inline void set_type(::cf::r0::proto::RobotTaskRequest_Type value);

  // required uint32 sequence_number = 2;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint32 value);

  // optional .cf.r0.proto.MoveTaskResponse move_task = 3;
  inline bool has_move_task() const;
  inline void clear_move_task();
  static const int kMoveTaskFieldNumber = 3;
  inline const ::cf::r0::proto::MoveTaskResponse& move_task() const;
  inline ::cf::r0::proto::MoveTaskResponse* mutable_move_task();
  inline ::cf::r0::proto::MoveTaskResponse* release_move_task();
  inline void set_allocated_move_task(::cf::r0::proto::MoveTaskResponse* move_task);

  // optional .cf.r0.proto.GetPositionTaskResponse position_task = 4;
  inline bool has_position_task() const;
  inline void clear_position_task();
  static const int kPositionTaskFieldNumber = 4;
  inline const ::cf::r0::proto::GetPositionTaskResponse& position_task() const;
  inline ::cf::r0::proto::GetPositionTaskResponse* mutable_position_task();
  inline ::cf::r0::proto::GetPositionTaskResponse* release_position_task();
  inline void set_allocated_position_task(::cf::r0::proto::GetPositionTaskResponse* position_task);

  // optional .cf.r0.proto.GetConfigurationTaskResponse get_config_task = 5;
  inline bool has_get_config_task() const;
  inline void clear_get_config_task();
  static const int kGetConfigTaskFieldNumber = 5;
  inline const ::cf::r0::proto::GetConfigurationTaskResponse& get_config_task() const;
  inline ::cf::r0::proto::GetConfigurationTaskResponse* mutable_get_config_task();
  inline ::cf::r0::proto::GetConfigurationTaskResponse* release_get_config_task();
  inline void set_allocated_get_config_task(::cf::r0::proto::GetConfigurationTaskResponse* get_config_task);

  // optional .cf.r0.proto.SetConfigurationTaskResponse set_config_task = 6;
  inline bool has_set_config_task() const;
  inline void clear_set_config_task();
  static const int kSetConfigTaskFieldNumber = 6;
  inline const ::cf::r0::proto::SetConfigurationTaskResponse& set_config_task() const;
  inline ::cf::r0::proto::SetConfigurationTaskResponse* mutable_set_config_task();
  inline ::cf::r0::proto::SetConfigurationTaskResponse* release_set_config_task();
  inline void set_allocated_set_config_task(::cf::r0::proto::SetConfigurationTaskResponse* set_config_task);

  // optional .cf.r0.proto.SetJointsTaskResponse set_joints_task = 7;
  inline bool has_set_joints_task() const;
  inline void clear_set_joints_task();
  static const int kSetJointsTaskFieldNumber = 7;
  inline const ::cf::r0::proto::SetJointsTaskResponse& set_joints_task() const;
  inline ::cf::r0::proto::SetJointsTaskResponse* mutable_set_joints_task();
  inline ::cf::r0::proto::SetJointsTaskResponse* release_set_joints_task();
  inline void set_allocated_set_joints_task(::cf::r0::proto::SetJointsTaskResponse* set_joints_task);

  // optional .cf.r0.proto.EnableTorqueTaskResponse enable_torque_task = 8;
  inline bool has_enable_torque_task() const;
  inline void clear_enable_torque_task();
  static const int kEnableTorqueTaskFieldNumber = 8;
  inline const ::cf::r0::proto::EnableTorqueTaskResponse& enable_torque_task() const;
  inline ::cf::r0::proto::EnableTorqueTaskResponse* mutable_enable_torque_task();
  inline ::cf::r0::proto::EnableTorqueTaskResponse* release_enable_torque_task();
  inline void set_allocated_enable_torque_task(::cf::r0::proto::EnableTorqueTaskResponse* enable_torque_task);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RobotTaskResponse)
  // @@protoc_insertion_point(class_scope:cf.r0.proto.RobotTaskResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_move_task();
  inline void clear_has_move_task();
  inline void set_has_position_task();
  inline void clear_has_position_task();
  inline void set_has_get_config_task();
  inline void clear_has_get_config_task();
  inline void set_has_set_config_task();
  inline void clear_has_set_config_task();
  inline void set_has_set_joints_task();
  inline void clear_has_set_joints_task();
  inline void set_has_enable_torque_task();
  inline void clear_has_enable_torque_task();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 sequence_number_;
  ::cf::r0::proto::MoveTaskResponse* move_task_;
  ::cf::r0::proto::GetPositionTaskResponse* position_task_;
  ::cf::r0::proto::GetConfigurationTaskResponse* get_config_task_;
  ::cf::r0::proto::SetConfigurationTaskResponse* set_config_task_;
  ::cf::r0::proto::SetJointsTaskResponse* set_joints_task_;
  ::cf::r0::proto::EnableTorqueTaskResponse* enable_torque_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
  friend void protobuf_AssignDesc_cf_2fr0_2fproto_2fRobotTask_2eproto();
  friend void protobuf_ShutdownFile_cf_2fr0_2fproto_2fRobotTask_2eproto();

  void InitAsDefaultInstance();
  static RobotTaskResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotTaskRequest

// required .cf.r0.proto.RobotTaskRequest.Type type = 1;
inline bool RobotTaskRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotTaskRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotTaskRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotTaskRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::cf::r0::proto::RobotTaskRequest_Type RobotTaskRequest::type() const {
  return static_cast< ::cf::r0::proto::RobotTaskRequest_Type >(type_);
}
inline void RobotTaskRequest::set_type(::cf::r0::proto::RobotTaskRequest_Type value) {
  assert(::cf::r0::proto::RobotTaskRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 sequence_number = 2;
inline bool RobotTaskRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotTaskRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotTaskRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotTaskRequest::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 RobotTaskRequest::sequence_number() const {
  return sequence_number_;
}
inline void RobotTaskRequest::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// optional .cf.r0.proto.MoveTaskRequest move_task = 3;
inline bool RobotTaskRequest::has_move_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotTaskRequest::set_has_move_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotTaskRequest::clear_has_move_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotTaskRequest::clear_move_task() {
  if (move_task_ != NULL) move_task_->::cf::r0::proto::MoveTaskRequest::Clear();
  clear_has_move_task();
}
inline const ::cf::r0::proto::MoveTaskRequest& RobotTaskRequest::move_task() const {
  return move_task_ != NULL ? *move_task_ : *default_instance_->move_task_;
}
inline ::cf::r0::proto::MoveTaskRequest* RobotTaskRequest::mutable_move_task() {
  set_has_move_task();
  if (move_task_ == NULL) move_task_ = new ::cf::r0::proto::MoveTaskRequest;
  return move_task_;
}
inline ::cf::r0::proto::MoveTaskRequest* RobotTaskRequest::release_move_task() {
  clear_has_move_task();
  ::cf::r0::proto::MoveTaskRequest* temp = move_task_;
  move_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_move_task(::cf::r0::proto::MoveTaskRequest* move_task) {
  delete move_task_;
  move_task_ = move_task;
  if (move_task) {
    set_has_move_task();
  } else {
    clear_has_move_task();
  }
}

// optional .cf.r0.proto.GetPositionTaskRequest position_task = 4;
inline bool RobotTaskRequest::has_position_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotTaskRequest::set_has_position_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotTaskRequest::clear_has_position_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotTaskRequest::clear_position_task() {
  if (position_task_ != NULL) position_task_->::cf::r0::proto::GetPositionTaskRequest::Clear();
  clear_has_position_task();
}
inline const ::cf::r0::proto::GetPositionTaskRequest& RobotTaskRequest::position_task() const {
  return position_task_ != NULL ? *position_task_ : *default_instance_->position_task_;
}
inline ::cf::r0::proto::GetPositionTaskRequest* RobotTaskRequest::mutable_position_task() {
  set_has_position_task();
  if (position_task_ == NULL) position_task_ = new ::cf::r0::proto::GetPositionTaskRequest;
  return position_task_;
}
inline ::cf::r0::proto::GetPositionTaskRequest* RobotTaskRequest::release_position_task() {
  clear_has_position_task();
  ::cf::r0::proto::GetPositionTaskRequest* temp = position_task_;
  position_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_position_task(::cf::r0::proto::GetPositionTaskRequest* position_task) {
  delete position_task_;
  position_task_ = position_task;
  if (position_task) {
    set_has_position_task();
  } else {
    clear_has_position_task();
  }
}

// optional .cf.r0.proto.GetConfigurationTaskRequest get_config_task = 5;
inline bool RobotTaskRequest::has_get_config_task() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotTaskRequest::set_has_get_config_task() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotTaskRequest::clear_has_get_config_task() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotTaskRequest::clear_get_config_task() {
  if (get_config_task_ != NULL) get_config_task_->::cf::r0::proto::GetConfigurationTaskRequest::Clear();
  clear_has_get_config_task();
}
inline const ::cf::r0::proto::GetConfigurationTaskRequest& RobotTaskRequest::get_config_task() const {
  return get_config_task_ != NULL ? *get_config_task_ : *default_instance_->get_config_task_;
}
inline ::cf::r0::proto::GetConfigurationTaskRequest* RobotTaskRequest::mutable_get_config_task() {
  set_has_get_config_task();
  if (get_config_task_ == NULL) get_config_task_ = new ::cf::r0::proto::GetConfigurationTaskRequest;
  return get_config_task_;
}
inline ::cf::r0::proto::GetConfigurationTaskRequest* RobotTaskRequest::release_get_config_task() {
  clear_has_get_config_task();
  ::cf::r0::proto::GetConfigurationTaskRequest* temp = get_config_task_;
  get_config_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_get_config_task(::cf::r0::proto::GetConfigurationTaskRequest* get_config_task) {
  delete get_config_task_;
  get_config_task_ = get_config_task;
  if (get_config_task) {
    set_has_get_config_task();
  } else {
    clear_has_get_config_task();
  }
}

// optional .cf.r0.proto.SetConfigurationTaskRequest set_config_task = 6;
inline bool RobotTaskRequest::has_set_config_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotTaskRequest::set_has_set_config_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotTaskRequest::clear_has_set_config_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotTaskRequest::clear_set_config_task() {
  if (set_config_task_ != NULL) set_config_task_->::cf::r0::proto::SetConfigurationTaskRequest::Clear();
  clear_has_set_config_task();
}
inline const ::cf::r0::proto::SetConfigurationTaskRequest& RobotTaskRequest::set_config_task() const {
  return set_config_task_ != NULL ? *set_config_task_ : *default_instance_->set_config_task_;
}
inline ::cf::r0::proto::SetConfigurationTaskRequest* RobotTaskRequest::mutable_set_config_task() {
  set_has_set_config_task();
  if (set_config_task_ == NULL) set_config_task_ = new ::cf::r0::proto::SetConfigurationTaskRequest;
  return set_config_task_;
}
inline ::cf::r0::proto::SetConfigurationTaskRequest* RobotTaskRequest::release_set_config_task() {
  clear_has_set_config_task();
  ::cf::r0::proto::SetConfigurationTaskRequest* temp = set_config_task_;
  set_config_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_set_config_task(::cf::r0::proto::SetConfigurationTaskRequest* set_config_task) {
  delete set_config_task_;
  set_config_task_ = set_config_task;
  if (set_config_task) {
    set_has_set_config_task();
  } else {
    clear_has_set_config_task();
  }
}

// optional .cf.r0.proto.SetJointsTaskRequest set_joints_task = 7;
inline bool RobotTaskRequest::has_set_joints_task() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotTaskRequest::set_has_set_joints_task() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotTaskRequest::clear_has_set_joints_task() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotTaskRequest::clear_set_joints_task() {
  if (set_joints_task_ != NULL) set_joints_task_->::cf::r0::proto::SetJointsTaskRequest::Clear();
  clear_has_set_joints_task();
}
inline const ::cf::r0::proto::SetJointsTaskRequest& RobotTaskRequest::set_joints_task() const {
  return set_joints_task_ != NULL ? *set_joints_task_ : *default_instance_->set_joints_task_;
}
inline ::cf::r0::proto::SetJointsTaskRequest* RobotTaskRequest::mutable_set_joints_task() {
  set_has_set_joints_task();
  if (set_joints_task_ == NULL) set_joints_task_ = new ::cf::r0::proto::SetJointsTaskRequest;
  return set_joints_task_;
}
inline ::cf::r0::proto::SetJointsTaskRequest* RobotTaskRequest::release_set_joints_task() {
  clear_has_set_joints_task();
  ::cf::r0::proto::SetJointsTaskRequest* temp = set_joints_task_;
  set_joints_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_set_joints_task(::cf::r0::proto::SetJointsTaskRequest* set_joints_task) {
  delete set_joints_task_;
  set_joints_task_ = set_joints_task;
  if (set_joints_task) {
    set_has_set_joints_task();
  } else {
    clear_has_set_joints_task();
  }
}

// optional .cf.r0.proto.EnableTorqueTaskRequest enable_torque_task = 8;
inline bool RobotTaskRequest::has_enable_torque_task() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RobotTaskRequest::set_has_enable_torque_task() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RobotTaskRequest::clear_has_enable_torque_task() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RobotTaskRequest::clear_enable_torque_task() {
  if (enable_torque_task_ != NULL) enable_torque_task_->::cf::r0::proto::EnableTorqueTaskRequest::Clear();
  clear_has_enable_torque_task();
}
inline const ::cf::r0::proto::EnableTorqueTaskRequest& RobotTaskRequest::enable_torque_task() const {
  return enable_torque_task_ != NULL ? *enable_torque_task_ : *default_instance_->enable_torque_task_;
}
inline ::cf::r0::proto::EnableTorqueTaskRequest* RobotTaskRequest::mutable_enable_torque_task() {
  set_has_enable_torque_task();
  if (enable_torque_task_ == NULL) enable_torque_task_ = new ::cf::r0::proto::EnableTorqueTaskRequest;
  return enable_torque_task_;
}
inline ::cf::r0::proto::EnableTorqueTaskRequest* RobotTaskRequest::release_enable_torque_task() {
  clear_has_enable_torque_task();
  ::cf::r0::proto::EnableTorqueTaskRequest* temp = enable_torque_task_;
  enable_torque_task_ = NULL;
  return temp;
}
inline void RobotTaskRequest::set_allocated_enable_torque_task(::cf::r0::proto::EnableTorqueTaskRequest* enable_torque_task) {
  delete enable_torque_task_;
  enable_torque_task_ = enable_torque_task;
  if (enable_torque_task) {
    set_has_enable_torque_task();
  } else {
    clear_has_enable_torque_task();
  }
}

// -------------------------------------------------------------------

// RobotTaskResponse

// required .cf.r0.proto.RobotTaskRequest.Type type = 1;
inline bool RobotTaskResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotTaskResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotTaskResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotTaskResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::cf::r0::proto::RobotTaskRequest_Type RobotTaskResponse::type() const {
  return static_cast< ::cf::r0::proto::RobotTaskRequest_Type >(type_);
}
inline void RobotTaskResponse::set_type(::cf::r0::proto::RobotTaskRequest_Type value) {
  assert(::cf::r0::proto::RobotTaskRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 sequence_number = 2;
inline bool RobotTaskResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotTaskResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotTaskResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotTaskResponse::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 RobotTaskResponse::sequence_number() const {
  return sequence_number_;
}
inline void RobotTaskResponse::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// optional .cf.r0.proto.MoveTaskResponse move_task = 3;
inline bool RobotTaskResponse::has_move_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotTaskResponse::set_has_move_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotTaskResponse::clear_has_move_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotTaskResponse::clear_move_task() {
  if (move_task_ != NULL) move_task_->::cf::r0::proto::MoveTaskResponse::Clear();
  clear_has_move_task();
}
inline const ::cf::r0::proto::MoveTaskResponse& RobotTaskResponse::move_task() const {
  return move_task_ != NULL ? *move_task_ : *default_instance_->move_task_;
}
inline ::cf::r0::proto::MoveTaskResponse* RobotTaskResponse::mutable_move_task() {
  set_has_move_task();
  if (move_task_ == NULL) move_task_ = new ::cf::r0::proto::MoveTaskResponse;
  return move_task_;
}
inline ::cf::r0::proto::MoveTaskResponse* RobotTaskResponse::release_move_task() {
  clear_has_move_task();
  ::cf::r0::proto::MoveTaskResponse* temp = move_task_;
  move_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_move_task(::cf::r0::proto::MoveTaskResponse* move_task) {
  delete move_task_;
  move_task_ = move_task;
  if (move_task) {
    set_has_move_task();
  } else {
    clear_has_move_task();
  }
}

// optional .cf.r0.proto.GetPositionTaskResponse position_task = 4;
inline bool RobotTaskResponse::has_position_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotTaskResponse::set_has_position_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotTaskResponse::clear_has_position_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotTaskResponse::clear_position_task() {
  if (position_task_ != NULL) position_task_->::cf::r0::proto::GetPositionTaskResponse::Clear();
  clear_has_position_task();
}
inline const ::cf::r0::proto::GetPositionTaskResponse& RobotTaskResponse::position_task() const {
  return position_task_ != NULL ? *position_task_ : *default_instance_->position_task_;
}
inline ::cf::r0::proto::GetPositionTaskResponse* RobotTaskResponse::mutable_position_task() {
  set_has_position_task();
  if (position_task_ == NULL) position_task_ = new ::cf::r0::proto::GetPositionTaskResponse;
  return position_task_;
}
inline ::cf::r0::proto::GetPositionTaskResponse* RobotTaskResponse::release_position_task() {
  clear_has_position_task();
  ::cf::r0::proto::GetPositionTaskResponse* temp = position_task_;
  position_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_position_task(::cf::r0::proto::GetPositionTaskResponse* position_task) {
  delete position_task_;
  position_task_ = position_task;
  if (position_task) {
    set_has_position_task();
  } else {
    clear_has_position_task();
  }
}

// optional .cf.r0.proto.GetConfigurationTaskResponse get_config_task = 5;
inline bool RobotTaskResponse::has_get_config_task() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotTaskResponse::set_has_get_config_task() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotTaskResponse::clear_has_get_config_task() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotTaskResponse::clear_get_config_task() {
  if (get_config_task_ != NULL) get_config_task_->::cf::r0::proto::GetConfigurationTaskResponse::Clear();
  clear_has_get_config_task();
}
inline const ::cf::r0::proto::GetConfigurationTaskResponse& RobotTaskResponse::get_config_task() const {
  return get_config_task_ != NULL ? *get_config_task_ : *default_instance_->get_config_task_;
}
inline ::cf::r0::proto::GetConfigurationTaskResponse* RobotTaskResponse::mutable_get_config_task() {
  set_has_get_config_task();
  if (get_config_task_ == NULL) get_config_task_ = new ::cf::r0::proto::GetConfigurationTaskResponse;
  return get_config_task_;
}
inline ::cf::r0::proto::GetConfigurationTaskResponse* RobotTaskResponse::release_get_config_task() {
  clear_has_get_config_task();
  ::cf::r0::proto::GetConfigurationTaskResponse* temp = get_config_task_;
  get_config_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_get_config_task(::cf::r0::proto::GetConfigurationTaskResponse* get_config_task) {
  delete get_config_task_;
  get_config_task_ = get_config_task;
  if (get_config_task) {
    set_has_get_config_task();
  } else {
    clear_has_get_config_task();
  }
}

// optional .cf.r0.proto.SetConfigurationTaskResponse set_config_task = 6;
inline bool RobotTaskResponse::has_set_config_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotTaskResponse::set_has_set_config_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotTaskResponse::clear_has_set_config_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotTaskResponse::clear_set_config_task() {
  if (set_config_task_ != NULL) set_config_task_->::cf::r0::proto::SetConfigurationTaskResponse::Clear();
  clear_has_set_config_task();
}
inline const ::cf::r0::proto::SetConfigurationTaskResponse& RobotTaskResponse::set_config_task() const {
  return set_config_task_ != NULL ? *set_config_task_ : *default_instance_->set_config_task_;
}
inline ::cf::r0::proto::SetConfigurationTaskResponse* RobotTaskResponse::mutable_set_config_task() {
  set_has_set_config_task();
  if (set_config_task_ == NULL) set_config_task_ = new ::cf::r0::proto::SetConfigurationTaskResponse;
  return set_config_task_;
}
inline ::cf::r0::proto::SetConfigurationTaskResponse* RobotTaskResponse::release_set_config_task() {
  clear_has_set_config_task();
  ::cf::r0::proto::SetConfigurationTaskResponse* temp = set_config_task_;
  set_config_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_set_config_task(::cf::r0::proto::SetConfigurationTaskResponse* set_config_task) {
  delete set_config_task_;
  set_config_task_ = set_config_task;
  if (set_config_task) {
    set_has_set_config_task();
  } else {
    clear_has_set_config_task();
  }
}

// optional .cf.r0.proto.SetJointsTaskResponse set_joints_task = 7;
inline bool RobotTaskResponse::has_set_joints_task() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotTaskResponse::set_has_set_joints_task() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotTaskResponse::clear_has_set_joints_task() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotTaskResponse::clear_set_joints_task() {
  if (set_joints_task_ != NULL) set_joints_task_->::cf::r0::proto::SetJointsTaskResponse::Clear();
  clear_has_set_joints_task();
}
inline const ::cf::r0::proto::SetJointsTaskResponse& RobotTaskResponse::set_joints_task() const {
  return set_joints_task_ != NULL ? *set_joints_task_ : *default_instance_->set_joints_task_;
}
inline ::cf::r0::proto::SetJointsTaskResponse* RobotTaskResponse::mutable_set_joints_task() {
  set_has_set_joints_task();
  if (set_joints_task_ == NULL) set_joints_task_ = new ::cf::r0::proto::SetJointsTaskResponse;
  return set_joints_task_;
}
inline ::cf::r0::proto::SetJointsTaskResponse* RobotTaskResponse::release_set_joints_task() {
  clear_has_set_joints_task();
  ::cf::r0::proto::SetJointsTaskResponse* temp = set_joints_task_;
  set_joints_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_set_joints_task(::cf::r0::proto::SetJointsTaskResponse* set_joints_task) {
  delete set_joints_task_;
  set_joints_task_ = set_joints_task;
  if (set_joints_task) {
    set_has_set_joints_task();
  } else {
    clear_has_set_joints_task();
  }
}

// optional .cf.r0.proto.EnableTorqueTaskResponse enable_torque_task = 8;
inline bool RobotTaskResponse::has_enable_torque_task() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RobotTaskResponse::set_has_enable_torque_task() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RobotTaskResponse::clear_has_enable_torque_task() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RobotTaskResponse::clear_enable_torque_task() {
  if (enable_torque_task_ != NULL) enable_torque_task_->::cf::r0::proto::EnableTorqueTaskResponse::Clear();
  clear_has_enable_torque_task();
}
inline const ::cf::r0::proto::EnableTorqueTaskResponse& RobotTaskResponse::enable_torque_task() const {
  return enable_torque_task_ != NULL ? *enable_torque_task_ : *default_instance_->enable_torque_task_;
}
inline ::cf::r0::proto::EnableTorqueTaskResponse* RobotTaskResponse::mutable_enable_torque_task() {
  set_has_enable_torque_task();
  if (enable_torque_task_ == NULL) enable_torque_task_ = new ::cf::r0::proto::EnableTorqueTaskResponse;
  return enable_torque_task_;
}
inline ::cf::r0::proto::EnableTorqueTaskResponse* RobotTaskResponse::release_enable_torque_task() {
  clear_has_enable_torque_task();
  ::cf::r0::proto::EnableTorqueTaskResponse* temp = enable_torque_task_;
  enable_torque_task_ = NULL;
  return temp;
}
inline void RobotTaskResponse::set_allocated_enable_torque_task(::cf::r0::proto::EnableTorqueTaskResponse* enable_torque_task) {
  delete enable_torque_task_;
  enable_torque_task_ = enable_torque_task;
  if (enable_torque_task) {
    set_has_enable_torque_task();
  } else {
    clear_has_enable_torque_task();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace r0
}  // namespace cf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cf::r0::proto::RobotTaskRequest_Type>() {
  return ::cf::r0::proto::RobotTaskRequest_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cf_2fr0_2fproto_2fRobotTask_2eproto__INCLUDED
