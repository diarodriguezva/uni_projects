// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cf/r0/proto/ToolConfiguration.proto

#ifndef PROTOBUF_cf_2fr0_2fproto_2fToolConfiguration_2eproto__INCLUDED
#define PROTOBUF_cf_2fr0_2fproto_2fToolConfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cf/r0/proto/Pose.pb.h"
// @@protoc_insertion_point(includes)

namespace cf {
namespace r0 {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cf_2fr0_2fproto_2fToolConfiguration_2eproto();
void protobuf_AssignDesc_cf_2fr0_2fproto_2fToolConfiguration_2eproto();
void protobuf_ShutdownFile_cf_2fr0_2fproto_2fToolConfiguration_2eproto();

class ToolConfiguration;

// ===================================================================

class ToolConfiguration : public ::google::protobuf::Message {
 public:
  ToolConfiguration();
  virtual ~ToolConfiguration();

  ToolConfiguration(const ToolConfiguration& from);

  inline ToolConfiguration& operator=(const ToolConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolConfiguration& default_instance();

  void Swap(ToolConfiguration* other);

  // implements Message ----------------------------------------------

  ToolConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToolConfiguration& from);
  void MergeFrom(const ToolConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .cf.r0.proto.Pose pose = 2;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 2;
  inline const ::cf::r0::proto::Pose& pose() const;
  inline ::cf::r0::proto::Pose* mutable_pose();
  inline ::cf::r0::proto::Pose* release_pose();
  inline void set_allocated_pose(::cf::r0::proto::Pose* pose);

  // @@protoc_insertion_point(class_scope:cf.r0.proto.ToolConfiguration)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::cf::r0::proto::Pose* pose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cf_2fr0_2fproto_2fToolConfiguration_2eproto();
  friend void protobuf_AssignDesc_cf_2fr0_2fproto_2fToolConfiguration_2eproto();
  friend void protobuf_ShutdownFile_cf_2fr0_2fproto_2fToolConfiguration_2eproto();

  void InitAsDefaultInstance();
  static ToolConfiguration* default_instance_;
};
// ===================================================================


// ===================================================================

// ToolConfiguration

// required string name = 1;
inline bool ToolConfiguration::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToolConfiguration::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToolConfiguration::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToolConfiguration::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ToolConfiguration::name() const {
  return *name_;
}
inline void ToolConfiguration::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToolConfiguration::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToolConfiguration::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToolConfiguration::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ToolConfiguration::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToolConfiguration::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .cf.r0.proto.Pose pose = 2;
inline bool ToolConfiguration::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToolConfiguration::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToolConfiguration::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToolConfiguration::clear_pose() {
  if (pose_ != NULL) pose_->::cf::r0::proto::Pose::Clear();
  clear_has_pose();
}
inline const ::cf::r0::proto::Pose& ToolConfiguration::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::cf::r0::proto::Pose* ToolConfiguration::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::cf::r0::proto::Pose;
  return pose_;
}
inline ::cf::r0::proto::Pose* ToolConfiguration::release_pose() {
  clear_has_pose();
  ::cf::r0::proto::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void ToolConfiguration::set_allocated_pose(::cf::r0::proto::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace r0
}  // namespace cf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cf_2fr0_2fproto_2fToolConfiguration_2eproto__INCLUDED
