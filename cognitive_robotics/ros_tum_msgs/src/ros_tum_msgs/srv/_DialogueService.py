"""autogenerated by genpy from ros_tum_msgs/DialogueServiceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_tum_msgs.msg

class DialogueServiceRequest(genpy.Message):
  _md5sum = "2fb82d19531004b9c9a5c10dc7177498"
  _type = "ros_tum_msgs/DialogueServiceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Dialogue request_dialogue

================================================================================
MSG: ros_tum_msgs/Dialogue
#Dialogue ID in the form of UUID
string id

#Dialogue source
string source

#Dialogue destination
string destination

#Dialogue Category
int32 category

#Dialogue Purpose
int32 purpose

#Dialogue Blocking
bool blocking

#Dialogue Message
DialogueMessage message

#Dialogue Expected Reply Type
int32 replyType

#Dialogue ReplyTo UUID
string replyTo

#Dialogue default Modlaities
int32[] defaultModalities

#Dialogue Preferred Modalities
int32[] preferredModalitiey


================================================================================
MSG: ros_tum_msgs/DialogueMessage
#Dialogue Message
string message

int32 messagePurpose


"""
  __slots__ = ['request_dialogue']
  _slot_types = ['ros_tum_msgs/Dialogue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_dialogue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DialogueServiceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request_dialogue is None:
        self.request_dialogue = ros_tum_msgs.msg.Dialogue()
    else:
      self.request_dialogue = ros_tum_msgs.msg.Dialogue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.request_dialogue.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_dialogue.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_dialogue.destination
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2iB.pack(_x.request_dialogue.category, _x.request_dialogue.purpose, _x.request_dialogue.blocking))
      _x = self.request_dialogue.message.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.request_dialogue.message.messagePurpose, _x.request_dialogue.replyType))
      _x = self.request_dialogue.replyTo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request_dialogue.defaultModalities)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.request_dialogue.defaultModalities))
      length = len(self.request_dialogue.preferredModalitiey)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.request_dialogue.preferredModalitiey))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.request_dialogue is None:
        self.request_dialogue = ros_tum_msgs.msg.Dialogue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.id = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.source = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.destination = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.destination = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.request_dialogue.category, _x.request_dialogue.purpose, _x.request_dialogue.blocking,) = _struct_2iB.unpack(str[start:end])
      self.request_dialogue.blocking = bool(self.request_dialogue.blocking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.message.message = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.message.message = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.request_dialogue.message.messagePurpose, _x.request_dialogue.replyType,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.replyTo = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.replyTo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.request_dialogue.defaultModalities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.request_dialogue.preferredModalitiey = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.request_dialogue.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_dialogue.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_dialogue.destination
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2iB.pack(_x.request_dialogue.category, _x.request_dialogue.purpose, _x.request_dialogue.blocking))
      _x = self.request_dialogue.message.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.request_dialogue.message.messagePurpose, _x.request_dialogue.replyType))
      _x = self.request_dialogue.replyTo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request_dialogue.defaultModalities)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.request_dialogue.defaultModalities.tostring())
      length = len(self.request_dialogue.preferredModalitiey)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.request_dialogue.preferredModalitiey.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.request_dialogue is None:
        self.request_dialogue = ros_tum_msgs.msg.Dialogue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.id = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.source = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.destination = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.destination = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.request_dialogue.category, _x.request_dialogue.purpose, _x.request_dialogue.blocking,) = _struct_2iB.unpack(str[start:end])
      self.request_dialogue.blocking = bool(self.request_dialogue.blocking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.message.message = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.message.message = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.request_dialogue.message.messagePurpose, _x.request_dialogue.replyType,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_dialogue.replyTo = str[start:end].decode('utf-8')
      else:
        self.request_dialogue.replyTo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.request_dialogue.defaultModalities = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.request_dialogue.preferredModalitiey = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2iB = struct.Struct("<2iB")
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from ros_tum_msgs/DialogueServiceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_tum_msgs.msg

class DialogueServiceResponse(genpy.Message):
  _md5sum = "23e568dba8eefcb7d9b6a4b0e907cb9d"
  _type = "ros_tum_msgs/DialogueServiceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Dialogue response_dialogue


================================================================================
MSG: ros_tum_msgs/Dialogue
#Dialogue ID in the form of UUID
string id

#Dialogue source
string source

#Dialogue destination
string destination

#Dialogue Category
int32 category

#Dialogue Purpose
int32 purpose

#Dialogue Blocking
bool blocking

#Dialogue Message
DialogueMessage message

#Dialogue Expected Reply Type
int32 replyType

#Dialogue ReplyTo UUID
string replyTo

#Dialogue default Modlaities
int32[] defaultModalities

#Dialogue Preferred Modalities
int32[] preferredModalitiey


================================================================================
MSG: ros_tum_msgs/DialogueMessage
#Dialogue Message
string message

int32 messagePurpose


"""
  __slots__ = ['response_dialogue']
  _slot_types = ['ros_tum_msgs/Dialogue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response_dialogue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DialogueServiceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response_dialogue is None:
        self.response_dialogue = ros_tum_msgs.msg.Dialogue()
    else:
      self.response_dialogue = ros_tum_msgs.msg.Dialogue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response_dialogue.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.response_dialogue.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.response_dialogue.destination
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2iB.pack(_x.response_dialogue.category, _x.response_dialogue.purpose, _x.response_dialogue.blocking))
      _x = self.response_dialogue.message.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.response_dialogue.message.messagePurpose, _x.response_dialogue.replyType))
      _x = self.response_dialogue.replyTo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.response_dialogue.defaultModalities)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.response_dialogue.defaultModalities))
      length = len(self.response_dialogue.preferredModalitiey)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.response_dialogue.preferredModalitiey))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.response_dialogue is None:
        self.response_dialogue = ros_tum_msgs.msg.Dialogue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.id = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.source = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.destination = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.destination = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.response_dialogue.category, _x.response_dialogue.purpose, _x.response_dialogue.blocking,) = _struct_2iB.unpack(str[start:end])
      self.response_dialogue.blocking = bool(self.response_dialogue.blocking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.message.message = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.message.message = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.response_dialogue.message.messagePurpose, _x.response_dialogue.replyType,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.replyTo = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.replyTo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.response_dialogue.defaultModalities = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.response_dialogue.preferredModalitiey = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response_dialogue.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.response_dialogue.source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.response_dialogue.destination
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2iB.pack(_x.response_dialogue.category, _x.response_dialogue.purpose, _x.response_dialogue.blocking))
      _x = self.response_dialogue.message.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.response_dialogue.message.messagePurpose, _x.response_dialogue.replyType))
      _x = self.response_dialogue.replyTo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.response_dialogue.defaultModalities)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.response_dialogue.defaultModalities.tostring())
      length = len(self.response_dialogue.preferredModalitiey)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.response_dialogue.preferredModalitiey.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.response_dialogue is None:
        self.response_dialogue = ros_tum_msgs.msg.Dialogue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.id = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.source = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.destination = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.destination = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.response_dialogue.category, _x.response_dialogue.purpose, _x.response_dialogue.blocking,) = _struct_2iB.unpack(str[start:end])
      self.response_dialogue.blocking = bool(self.response_dialogue.blocking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.message.message = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.message.message = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.response_dialogue.message.messagePurpose, _x.response_dialogue.replyType,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response_dialogue.replyTo = str[start:end].decode('utf-8')
      else:
        self.response_dialogue.replyTo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.response_dialogue.defaultModalities = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.response_dialogue.preferredModalitiey = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2iB = struct.Struct("<2iB")
_struct_2i = struct.Struct("<2i")
class DialogueService(object):
  _type          = 'ros_tum_msgs/DialogueService'
  _md5sum = '85c1bb5fd24221a3e696cace9a3612d0'
  _request_class  = DialogueServiceRequest
  _response_class = DialogueServiceResponse
