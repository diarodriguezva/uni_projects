"""autogenerated by genpy from ros_tum_msgs/RobotStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_tum_msgs.msg

class RobotStatus(genpy.Message):
  _md5sum = "03e3aae468982e4878c906a3503f5ad0"
  _type = "ros_tum_msgs/RobotStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 mode

int32 action

string actionIdentifier

ActionResult result
	
string timeStamp

================================================================================
MSG: ros_tum_msgs/ActionResult
#Action Result {SUCCESS, FAIL}

int32 SUCCESS 	=  1
int32 FAIL 	= -1


"""
  __slots__ = ['mode','action','actionIdentifier','result','timeStamp']
  _slot_types = ['int32','int32','string','ros_tum_msgs/ActionResult','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,action,actionIdentifier,result,timeStamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.action is None:
        self.action = 0
      if self.actionIdentifier is None:
        self.actionIdentifier = ''
      if self.result is None:
        self.result = ros_tum_msgs.msg.ActionResult()
      if self.timeStamp is None:
        self.timeStamp = ''
    else:
      self.mode = 0
      self.action = 0
      self.actionIdentifier = ''
      self.result = ros_tum_msgs.msg.ActionResult()
      self.timeStamp = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.mode, _x.action))
      _x = self.actionIdentifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeStamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.result is None:
        self.result = ros_tum_msgs.msg.ActionResult()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mode, _x.action,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionIdentifier = str[start:end].decode('utf-8')
      else:
        self.actionIdentifier = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStamp = str[start:end].decode('utf-8')
      else:
        self.timeStamp = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.mode, _x.action))
      _x = self.actionIdentifier
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.timeStamp
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.result is None:
        self.result = ros_tum_msgs.msg.ActionResult()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mode, _x.action,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actionIdentifier = str[start:end].decode('utf-8')
      else:
        self.actionIdentifier = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timeStamp = str[start:end].decode('utf-8')
      else:
        self.timeStamp = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
