"""autogenerated by genpy from ros_tum_msgs/CameraCalibData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraCalibData(genpy.Message):
  _md5sum = "18384f0ea70eb529ee9164ac23ad37c2"
  _type = "ros_tum_msgs/CameraCalibData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 width
int32 height
string encoding
float64[9] K
float64[16] E
float64[12] P

"""
  __slots__ = ['width','height','encoding','K','E','P']
  _slot_types = ['int32','int32','string','float64[9]','float64[16]','float64[12]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,height,encoding,K,E,P

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraCalibData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.encoding is None:
        self.encoding = ''
      if self.K is None:
        self.K = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.E is None:
        self.E = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.P is None:
        self.P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.width = 0
      self.height = 0
      self.encoding = ''
      self.K = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.E = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.width, _x.height))
      _x = self.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_9d.pack(*self.K))
      buff.write(_struct_16d.pack(*self.E))
      buff.write(_struct_12d.pack(*self.P))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoding = str[start:end].decode('utf-8')
      else:
        self.encoding = str[start:end]
      start = end
      end += 72
      self.K = _struct_9d.unpack(str[start:end])
      start = end
      end += 128
      self.E = _struct_16d.unpack(str[start:end])
      start = end
      end += 96
      self.P = _struct_12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.width, _x.height))
      _x = self.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.K.tostring())
      buff.write(self.E.tostring())
      buff.write(self.P.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoding = str[start:end].decode('utf-8')
      else:
        self.encoding = str[start:end]
      start = end
      end += 72
      self.K = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 128
      self.E = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 96
      self.P = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_16d = struct.Struct("<16d")
_struct_12d = struct.Struct("<12d")
_struct_2i = struct.Struct("<2i")
_struct_9d = struct.Struct("<9d")
