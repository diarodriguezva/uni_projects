"""autogenerated by genpy from ros_tum_msgs/ActionName.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionName(genpy.Message):
  _md5sum = "8a48447fd19eee26e57870058e1390bf"
  _type = "ros_tum_msgs/ActionName"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Action Names {MOVE, MOVETOHUMAN, OPENGRIPPER, CLOSEGRIPPER, SENSEFORCE, STOPROBOT, MOVEFORCELINEAR, MOVEFORCEANGULAR, MOVEJOINT}

int32 MOVE 				= 1
int32 MOVETOHUMAN 			= 2
int32 OPENGRIPPER 			= 3
int32 CLOSEGRIPPER 			= 4
int32 SENSEFORCE 			= 5
int32 STOPROBOT 			= 6
int32 MOVEFORCELINEAR 			= 7
int32 MOVEFORCEANGULAR 			= 8
int32 MOVEJOINT 			= 9
int32 MOVECARTESIAN 			= 10
int32 ENABLEFORCE 			= 11
int32 DISABLEFORCE 			= 12
int32 SETZEROFORCE 			= 13
int32 MOVECARTESIANFIXEDORIENTATION 	= 14

"""
  # Pseudo-constants
  MOVE = 1
  MOVETOHUMAN = 2
  OPENGRIPPER = 3
  CLOSEGRIPPER = 4
  SENSEFORCE = 5
  STOPROBOT = 6
  MOVEFORCELINEAR = 7
  MOVEFORCEANGULAR = 8
  MOVEJOINT = 9
  MOVECARTESIAN = 10
  ENABLEFORCE = 11
  DISABLEFORCE = 12
  SETZEROFORCE = 13
  MOVECARTESIANFIXEDORIENTATION = 14

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionName, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
