"""autogenerated by genpy from ros_tum_msgs/TaskStatusVec.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_tum_msgs.msg

class TaskStatusVec(genpy.Message):
  _md5sum = "c6915abae0a5397a934062dbac54298a"
  _type = "ros_tum_msgs/TaskStatusVec"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#TaskStatuc Vector

TaskStatus[] TaskStatusVec

================================================================================
MSG: ros_tum_msgs/TaskStatus
#Task Structure

string taskName

string[] taskActions

bool[] actionDoneStatus

"""
  __slots__ = ['TaskStatusVec']
  _slot_types = ['ros_tum_msgs/TaskStatus[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TaskStatusVec

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskStatusVec, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.TaskStatusVec is None:
        self.TaskStatusVec = []
    else:
      self.TaskStatusVec = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.TaskStatusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.TaskStatusVec:
        _x = val1.taskName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.taskActions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.taskActions:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.actionDoneStatus)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.actionDoneStatus))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.TaskStatusVec is None:
        self.TaskStatusVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.TaskStatusVec = []
      for i in range(0, length):
        val1 = ros_tum_msgs.msg.TaskStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.taskName = str[start:end].decode('utf-8')
        else:
          val1.taskName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.taskActions = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.taskActions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.actionDoneStatus = struct.unpack(pattern, str[start:end])
        val1.actionDoneStatus = map(bool, val1.actionDoneStatus)
        self.TaskStatusVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.TaskStatusVec)
      buff.write(_struct_I.pack(length))
      for val1 in self.TaskStatusVec:
        _x = val1.taskName
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.taskActions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.taskActions:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.actionDoneStatus)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.actionDoneStatus.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.TaskStatusVec is None:
        self.TaskStatusVec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.TaskStatusVec = []
      for i in range(0, length):
        val1 = ros_tum_msgs.msg.TaskStatus()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.taskName = str[start:end].decode('utf-8')
        else:
          val1.taskName = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.taskActions = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.taskActions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.actionDoneStatus = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.actionDoneStatus = map(bool, val1.actionDoneStatus)
        self.TaskStatusVec.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
