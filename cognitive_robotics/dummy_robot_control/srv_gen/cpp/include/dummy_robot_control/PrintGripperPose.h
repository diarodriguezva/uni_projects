/* Auto-generated by genmsg_cpp for file /home/diego/fuerte_workspace/sandbox/Cognitive/dummy_robot_control/srv/PrintGripperPose.srv */
#ifndef DUMMY_ROBOT_CONTROL_SERVICE_PRINTGRIPPERPOSE_H
#define DUMMY_ROBOT_CONTROL_SERVICE_PRINTGRIPPERPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dummy_robot_control
{
template <class ContainerAllocator>
struct PrintGripperPoseRequest_ {
  typedef PrintGripperPoseRequest_<ContainerAllocator> Type;

  PrintGripperPoseRequest_()
  {
  }

  PrintGripperPoseRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PrintGripperPoseRequest
typedef  ::dummy_robot_control::PrintGripperPoseRequest_<std::allocator<void> > PrintGripperPoseRequest;

typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseRequest> PrintGripperPoseRequestPtr;
typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseRequest const> PrintGripperPoseRequestConstPtr;


template <class ContainerAllocator>
struct PrintGripperPoseResponse_ {
  typedef PrintGripperPoseResponse_<ContainerAllocator> Type;

  PrintGripperPoseResponse_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  PrintGripperPoseResponse_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;


  typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PrintGripperPoseResponse
typedef  ::dummy_robot_control::PrintGripperPoseResponse_<std::allocator<void> > PrintGripperPoseResponse;

typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseResponse> PrintGripperPoseResponsePtr;
typedef boost::shared_ptr< ::dummy_robot_control::PrintGripperPoseResponse const> PrintGripperPoseResponseConstPtr;

struct PrintGripperPose
{

typedef PrintGripperPoseRequest Request;
typedef PrintGripperPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PrintGripperPose
} // namespace dummy_robot_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dummy_robot_control/PrintGripperPoseRequest";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc153912f1453b70ULL;
  static const uint64_t static_value2 = 0x8d221682bc23d9acULL;
};

template<class ContainerAllocator>
struct DataType< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dummy_robot_control/PrintGripperPoseResponse";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PrintGripperPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PrintGripperPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dummy_robot_control::PrintGripperPose> {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const dummy_robot_control::PrintGripperPose&) { return value(); } 
};

template<>
struct DataType<dummy_robot_control::PrintGripperPose> {
  static const char* value() 
  {
    return "dummy_robot_control/PrintGripperPose";
  }

  static const char* value(const dummy_robot_control::PrintGripperPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dummy_robot_control/PrintGripperPose";
  }

  static const char* value(const dummy_robot_control::PrintGripperPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc153912f1453b708d221682bc23d9ac";
  }

  static const char* value(const dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dummy_robot_control/PrintGripperPose";
  }

  static const char* value(const dummy_robot_control::PrintGripperPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DUMMY_ROBOT_CONTROL_SERVICE_PRINTGRIPPERPOSE_H

