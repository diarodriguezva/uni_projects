"""autogenerated by genpy from re_tts/TalkRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TalkRequest(genpy.Message):
  _md5sum = "2f90f9b834ee78936a407342cb10546c"
  _type = "re_tts/TalkRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string text
float32 vol
float32 rate


"""
  __slots__ = ['text','vol','rate']
  _slot_types = ['string','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       text,vol,rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TalkRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.text is None:
        self.text = ''
      if self.vol is None:
        self.vol = 0.
      if self.rate is None:
        self.rate = 0.
    else:
      self.text = ''
      self.vol = 0.
      self.rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.vol, _x.rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8')
      else:
        self.text = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.vol, _x.rate,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.vol, _x.rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8')
      else:
        self.text = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.vol, _x.rate,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
"""autogenerated by genpy from re_tts/TalkResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class TalkResponse(genpy.Message):
  _md5sum = "0d75ec6fe978fd8cbc53a2c7b9eb9574"
  _type = "re_tts/TalkResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success
time time
duration dur



"""
  __slots__ = ['success','time','dur']
  _slot_types = ['bool','time','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,time,dur

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TalkResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.time is None:
        self.time = genpy.Time()
      if self.dur is None:
        self.dur = genpy.Duration()
    else:
      self.success = False
      self.time = genpy.Time()
      self.dur = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2I2i.pack(_x.success, _x.time.secs, _x.time.nsecs, _x.dur.secs, _x.dur.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      if self.dur is None:
        self.dur = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success, _x.time.secs, _x.time.nsecs, _x.dur.secs, _x.dur.nsecs,) = _struct_B2I2i.unpack(str[start:end])
      self.success = bool(self.success)
      self.time.canon()
      self.dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2I2i.pack(_x.success, _x.time.secs, _x.time.nsecs, _x.dur.secs, _x.dur.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time is None:
        self.time = genpy.Time()
      if self.dur is None:
        self.dur = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.success, _x.time.secs, _x.time.nsecs, _x.dur.secs, _x.dur.nsecs,) = _struct_B2I2i.unpack(str[start:end])
      self.success = bool(self.success)
      self.time.canon()
      self.dur.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2I2i = struct.Struct("<B2I2i")
class Talk(object):
  _type          = 're_tts/Talk'
  _md5sum = '3176be6b5437c70aea8f6b83ca856d83'
  _request_class  = TalkRequest
  _response_class = TalkResponse
