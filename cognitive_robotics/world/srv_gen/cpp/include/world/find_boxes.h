/* Auto-generated by genmsg_cpp for file /home/diego/fuerte_workspace/sandbox/Cognitive/world/srv/find_boxes.srv */
#ifndef WORLD_SERVICE_FIND_BOXES_H
#define WORLD_SERVICE_FIND_BOXES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace world
{
template <class ContainerAllocator>
struct find_boxesRequest_ {
  typedef find_boxesRequest_<ContainerAllocator> Type;

  find_boxesRequest_()
  {
  }

  find_boxesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::world::find_boxesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world::find_boxesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct find_boxesRequest
typedef  ::world::find_boxesRequest_<std::allocator<void> > find_boxesRequest;

typedef boost::shared_ptr< ::world::find_boxesRequest> find_boxesRequestPtr;
typedef boost::shared_ptr< ::world::find_boxesRequest const> find_boxesRequestConstPtr;


template <class ContainerAllocator>
struct find_boxesResponse_ {
  typedef find_boxesResponse_<ContainerAllocator> Type;

  find_boxesResponse_()
  : x_min()
  , x_max()
  , y_min()
  , y_max()
  , color()
  {
    x_min.assign(0);
    x_max.assign(0);
    y_min.assign(0);
    y_max.assign(0);
  }

  find_boxesResponse_(const ContainerAllocator& _alloc)
  : x_min()
  , x_max()
  , y_min()
  , y_max()
  , color()
  {
    x_min.assign(0);
    x_max.assign(0);
    y_min.assign(0);
    y_max.assign(0);
    color.assign(std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > (_alloc));
  }

  typedef boost::array<int32_t, 3>  _x_min_type;
  boost::array<int32_t, 3>  x_min;

  typedef boost::array<int32_t, 3>  _x_max_type;
  boost::array<int32_t, 3>  x_max;

  typedef boost::array<int32_t, 3>  _y_min_type;
  boost::array<int32_t, 3>  y_min;

  typedef boost::array<int32_t, 3>  _y_max_type;
  boost::array<int32_t, 3>  y_max;

  typedef boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 3>  _color_type;
  boost::array<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , 3>  color;


  typedef boost::shared_ptr< ::world::find_boxesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world::find_boxesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct find_boxesResponse
typedef  ::world::find_boxesResponse_<std::allocator<void> > find_boxesResponse;

typedef boost::shared_ptr< ::world::find_boxesResponse> find_boxesResponsePtr;
typedef boost::shared_ptr< ::world::find_boxesResponse const> find_boxesResponseConstPtr;

struct find_boxes
{

typedef find_boxesRequest Request;
typedef find_boxesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct find_boxes
} // namespace world

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::world::find_boxesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::world::find_boxesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::world::find_boxesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::world::find_boxesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::world::find_boxesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/find_boxesRequest";
  }

  static const char* value(const  ::world::find_boxesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::world::find_boxesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::world::find_boxesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::world::find_boxesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::world::find_boxesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::world::find_boxesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::world::find_boxesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca3cd3dd6596c92aacbb3410f2ee428a";
  }

  static const char* value(const  ::world::find_boxesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca3cd3dd6596c92aULL;
  static const uint64_t static_value2 = 0xacbb3410f2ee428aULL;
};

template<class ContainerAllocator>
struct DataType< ::world::find_boxesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/find_boxesResponse";
  }

  static const char* value(const  ::world::find_boxesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::world::find_boxesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[3] x_min\n\
int32[3] x_max\n\
int32[3] y_min\n\
int32[3] y_max\n\
string[3] color\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::world::find_boxesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::world::find_boxesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct find_boxesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::world::find_boxesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_min);
    stream.next(m.x_max);
    stream.next(m.y_min);
    stream.next(m.y_max);
    stream.next(m.color);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct find_boxesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<world::find_boxes> {
  static const char* value() 
  {
    return "ca3cd3dd6596c92aacbb3410f2ee428a";
  }

  static const char* value(const world::find_boxes&) { return value(); } 
};

template<>
struct DataType<world::find_boxes> {
  static const char* value() 
  {
    return "world/find_boxes";
  }

  static const char* value(const world::find_boxes&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<world::find_boxesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca3cd3dd6596c92aacbb3410f2ee428a";
  }

  static const char* value(const world::find_boxesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<world::find_boxesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/find_boxes";
  }

  static const char* value(const world::find_boxesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<world::find_boxesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca3cd3dd6596c92aacbb3410f2ee428a";
  }

  static const char* value(const world::find_boxesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<world::find_boxesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/find_boxes";
  }

  static const char* value(const world::find_boxesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WORLD_SERVICE_FIND_BOXES_H

