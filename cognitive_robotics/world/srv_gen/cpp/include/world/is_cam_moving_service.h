/* Auto-generated by genmsg_cpp for file /home/diego/fuerte_workspace/sandbox/Cognitive/world/srv/is_cam_moving_service.srv */
#ifndef WORLD_SERVICE_IS_CAM_MOVING_SERVICE_H
#define WORLD_SERVICE_IS_CAM_MOVING_SERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace world
{
template <class ContainerAllocator>
struct is_cam_moving_serviceRequest_ {
  typedef is_cam_moving_serviceRequest_<ContainerAllocator> Type;

  is_cam_moving_serviceRequest_()
  {
  }

  is_cam_moving_serviceRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world::is_cam_moving_serviceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct is_cam_moving_serviceRequest
typedef  ::world::is_cam_moving_serviceRequest_<std::allocator<void> > is_cam_moving_serviceRequest;

typedef boost::shared_ptr< ::world::is_cam_moving_serviceRequest> is_cam_moving_serviceRequestPtr;
typedef boost::shared_ptr< ::world::is_cam_moving_serviceRequest const> is_cam_moving_serviceRequestConstPtr;


template <class ContainerAllocator>
struct is_cam_moving_serviceResponse_ {
  typedef is_cam_moving_serviceResponse_<ContainerAllocator> Type;

  is_cam_moving_serviceResponse_()
  : cam_state(false)
  {
  }

  is_cam_moving_serviceResponse_(const ContainerAllocator& _alloc)
  : cam_state(false)
  {
  }

  typedef uint8_t _cam_state_type;
  uint8_t cam_state;


  typedef boost::shared_ptr< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world::is_cam_moving_serviceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct is_cam_moving_serviceResponse
typedef  ::world::is_cam_moving_serviceResponse_<std::allocator<void> > is_cam_moving_serviceResponse;

typedef boost::shared_ptr< ::world::is_cam_moving_serviceResponse> is_cam_moving_serviceResponsePtr;
typedef boost::shared_ptr< ::world::is_cam_moving_serviceResponse const> is_cam_moving_serviceResponseConstPtr;

struct is_cam_moving_service
{

typedef is_cam_moving_serviceRequest Request;
typedef is_cam_moving_serviceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct is_cam_moving_service
} // namespace world

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::world::is_cam_moving_serviceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::world::is_cam_moving_serviceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/is_cam_moving_serviceRequest";
  }

  static const char* value(const  ::world::is_cam_moving_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::world::is_cam_moving_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::world::is_cam_moving_serviceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f5186cce6f51e3392e21dd852d2725e";
  }

  static const char* value(const  ::world::is_cam_moving_serviceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4f5186cce6f51e33ULL;
  static const uint64_t static_value2 = 0x92e21dd852d2725eULL;
};

template<class ContainerAllocator>
struct DataType< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/is_cam_moving_serviceResponse";
  }

  static const char* value(const  ::world::is_cam_moving_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool cam_state\n\
\n\
\n\
";
  }

  static const char* value(const  ::world::is_cam_moving_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::world::is_cam_moving_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct is_cam_moving_serviceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::world::is_cam_moving_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cam_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct is_cam_moving_serviceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<world::is_cam_moving_service> {
  static const char* value() 
  {
    return "4f5186cce6f51e3392e21dd852d2725e";
  }

  static const char* value(const world::is_cam_moving_service&) { return value(); } 
};

template<>
struct DataType<world::is_cam_moving_service> {
  static const char* value() 
  {
    return "world/is_cam_moving_service";
  }

  static const char* value(const world::is_cam_moving_service&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<world::is_cam_moving_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f5186cce6f51e3392e21dd852d2725e";
  }

  static const char* value(const world::is_cam_moving_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<world::is_cam_moving_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/is_cam_moving_service";
  }

  static const char* value(const world::is_cam_moving_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<world::is_cam_moving_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f5186cce6f51e3392e21dd852d2725e";
  }

  static const char* value(const world::is_cam_moving_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<world::is_cam_moving_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "world/is_cam_moving_service";
  }

  static const char* value(const world::is_cam_moving_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WORLD_SERVICE_IS_CAM_MOVING_SERVICE_H

