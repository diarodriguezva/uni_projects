#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
 1.0000000000000001E-001   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(79,46)
signalPressure.hydPlug.p
pipeSection.pipeMass.dp
pipeSection.pipeMass.v
pipeSection.pipeMass.der(v)
pipeSection.pipeMass.rho
pipeSection.pipeMass.A
pipeSection.pipeMass.l
pipeSection.compressibleVolume.V
pipeSection.compressibleVolume.kappa
pipeSection.compressibleVolume.hydPlug.p
pipeSection.compressibleVolume.hydPlug.der(p)
pipeSection.compressibleVolume.hydPlug.v
pipeSection.pipeFriction.dp
pipeSection.pipeFriction.k
pipeSection.hydPlug_b.p
pipeSection1.pipeMass.dp
pipeSection1.pipeMass.v
pipeSection1.pipeMass.der(v)
pipeSection1.pipeMass.rho
pipeSection1.pipeMass.A
pipeSection1.pipeMass.l
pipeSection1.compressibleVolume.V
pipeSection1.compressibleVolume.kappa
pipeSection1.compressibleVolume.hydPlug.p
pipeSection1.compressibleVolume.hydPlug.der(p)
pipeSection1.compressibleVolume.hydPlug.v
pipeSection1.pipeFriction.dp
pipeSection1.pipeFriction.k
pipeSection1.hydPlug_b.p
pipeSection2.pipeMass.dp
pipeSection2.pipeMass.v
pipeSection2.pipeMass.der(v)
pipeSection2.pipeMass.rho
pipeSection2.pipeMass.A
pipeSection2.pipeMass.l
pipeSection2.compressibleVolume.V
pipeSection2.compressibleVolume.kappa
pipeSection2.compressibleVolume.hydPlug.p
pipeSection2.compressibleVolume.hydPlug.der(p)
pipeSection2.compressibleVolume.hydPlug.v
pipeSection2.pipeFriction.dp
pipeSection2.pipeFriction.k
pipeSection2.hydPlug_b.p
pipeSection2.hydPlug_b.v
pipeSection3.pipeMass.dp
pipeSection3.pipeMass.v
pipeSection3.pipeMass.der(v)
pipeSection3.pipeMass.rho
pipeSection3.pipeMass.A
pipeSection3.pipeMass.l
pipeSection3.compressibleVolume.V
pipeSection3.compressibleVolume.kappa
pipeSection3.compressibleVolume.hydPlug.p
pipeSection3.compressibleVolume.hydPlug.der(p)
pipeSection3.compressibleVolume.hydPlug.v
pipeSection3.pipeFriction.dp
pipeSection3.pipeFriction.k
pipeSection3.hydPlug_a.p
pipeSection4.pipeMass.hydPlug_a.v
pipeSection4.pipeMass.hydPlug_b.v
pipeSection4.pipeMass.dp
pipeSection4.pipeMass.v
pipeSection4.pipeMass.der(v)
pipeSection4.pipeMass.rho
pipeSection4.pipeMass.A
pipeSection4.pipeMass.l
pipeSection4.compressibleVolume.V
pipeSection4.compressibleVolume.kappa
pipeSection4.compressibleVolume.hydPlug.p
pipeSection4.compressibleVolume.hydPlug.der(p)
pipeSection4.pipeFriction.dp
pipeSection4.pipeFriction.k
pipeSection4.hydPlug_a.v
sine.amplitude
sine.freqHz
sine.phase
sine.offset
sine.startTime
sine.pi

double initialValue(79,6)
  0       0                  0       0                  6   260   # signalPressure.hydPlug.p
  0       0                  0       0                  6   256   # pipeSection.pipeMass.dp
 -1       0                  0       0                  2   280   # pipeSection.pipeMass.v
  0       0                  0       0                  3   256   # pipeSection.pipeMass.der(v)
 -1 1.2900000000000000E+000  0 1.0000000000000000E+100  1   280   # pipeSection.pipeMass.rho
 -1 1.0000000000000000E-002  0       0                  1   280   # pipeSection.pipeMass.A
 -1 2.0000000000000001E-001  0       0                  1   280   # pipeSection.pipeMass.l
 -1 2.0000000000000000E-003  0       0                  1   280   # pipeSection.compressibleVolume.V
 -1 1.0000000000000001E-005  0       0                  1   280   # pipeSection.compressibleVolume.kappa
 -1       0                  0       0                  2   284   # pipeSection.compressibleVolume.hydPlug.p
  0       0                  0       0                  3   260   # pipeSection.compressibleVolume.hydPlug.der(p)
  0       0                  0       0                  6   388   # pipeSection.compressibleVolume.hydPlug.v
  0       0                  0       0                  6   256   # pipeSection.pipeFriction.dp
 -1    5000                  0       0                  1   280   # pipeSection.pipeFriction.k
  0       0                  0       0                  6   260   # pipeSection.hydPlug_b.p
  0       0                  0       0                  6   256   # pipeSection1.pipeMass.dp
 -1       0                  0       0                  2   280   # pipeSection1.pipeMass.v
  0       0                  0       0                  3   256   # pipeSection1.pipeMass.der(v)
 -1 1.2900000000000000E+000  0 1.0000000000000000E+100  1   280   # pipeSection1.pipeMass.rho
 -1 1.0000000000000000E-002  0       0                  1   280   # pipeSection1.pipeMass.A
 -1 2.0000000000000001E-001  0       0                  1   280   # pipeSection1.pipeMass.l
 -1 2.0000000000000000E-003  0       0                  1   280   # pipeSection1.compressibleVolume.V
 -1 1.0000000000000001E-005  0       0                  1   280   # pipeSection1.compressibleVolume.kappa
 -1       0                  0       0                  2   284   # pipeSection1.compressibleVolume.hydPlug.p
  0       0                  0       0                  3   260   # pipeSection1.compressibleVolume.hydPlug.der(p)
  0       0                  0       0                  6   388   # pipeSection1.compressibleVolume.hydPlug.v
  0       0                  0       0                  6   256   # pipeSection1.pipeFriction.dp
 -1    5000                  0       0                  1   280   # pipeSection1.pipeFriction.k
  0       0                  0       0                  6   260   # pipeSection1.hydPlug_b.p
  0       0                  0       0                  6   256   # pipeSection2.pipeMass.dp
 -1       0                  0       0                  2   280   # pipeSection2.pipeMass.v
  0       0                  0       0                  3   256   # pipeSection2.pipeMass.der(v)
 -1 1.2900000000000000E+000  0 1.0000000000000000E+100  1   280   # pipeSection2.pipeMass.rho
 -1 1.0000000000000000E-002  0       0                  1   280   # pipeSection2.pipeMass.A
 -1 2.0000000000000001E-001  0       0                  1   280   # pipeSection2.pipeMass.l
 -1 2.0000000000000000E-003  0       0                  1   280   # pipeSection2.compressibleVolume.V
 -1 1.0000000000000001E-005  0       0                  1   280   # pipeSection2.compressibleVolume.kappa
 -1       0                  0       0                  2   284   # pipeSection2.compressibleVolume.hydPlug.p
  0       0                  0       0                  3   260   # pipeSection2.compressibleVolume.hydPlug.der(p)
  0       0                  0       0                  6   388   # pipeSection2.compressibleVolume.hydPlug.v
  0       0                  0       0                  6   256   # pipeSection2.pipeFriction.dp
 -1    5000                  0       0                  1   280   # pipeSection2.pipeFriction.k
  0       0                  0       0                  6   260   # pipeSection2.hydPlug_b.p
  0       0                  0       0                  6   388   # pipeSection2.hydPlug_b.v
  0       0                  0       0                  6   256   # pipeSection3.pipeMass.dp
 -1       0                  0       0                  2   280   # pipeSection3.pipeMass.v
  0       0                  0       0                  3   256   # pipeSection3.pipeMass.der(v)
 -1 1.2900000000000000E+000  0 1.0000000000000000E+100  1   280   # pipeSection3.pipeMass.rho
 -1 1.0000000000000000E-002  0       0                  1   280   # pipeSection3.pipeMass.A
 -1 2.0000000000000001E-001  0       0                  1   280   # pipeSection3.pipeMass.l
 -1 2.0000000000000000E-003  0       0                  1   280   # pipeSection3.compressibleVolume.V
 -1 1.0000000000000001E-005  0       0                  1   280   # pipeSection3.compressibleVolume.kappa
 -1       0                  0       0                  2   284   # pipeSection3.compressibleVolume.hydPlug.p
  0       0                  0       0                  3   260   # pipeSection3.compressibleVolume.hydPlug.der(p)
  0       0                  0       0                  6   388   # pipeSection3.compressibleVolume.hydPlug.v
  0       0                  0       0                  6   256   # pipeSection3.pipeFriction.dp
 -1    5000                  0       0                  1   280   # pipeSection3.pipeFriction.k
  0       0                  0       0                  6   260   # pipeSection3.hydPlug_a.p
  0       0                  0       0                  6   388   # pipeSection4.pipeMass.hydPlug_a.v
  0       0                  0       0                  6   388   # pipeSection4.pipeMass.hydPlug_b.v
  0       0                  0       0                  6   256   # pipeSection4.pipeMass.dp
  0       0                  0       0                  6   256   # pipeSection4.pipeMass.v
  0       0                  0       0                  6   256   # pipeSection4.pipeMass.der(v)
 -1 1.2900000000000000E+000  0 1.0000000000000000E+100  1   280   # pipeSection4.pipeMass.rho
 -1 1.0000000000000000E-002  0       0                  1   280   # pipeSection4.pipeMass.A
 -1 2.0000000000000001E-001  0       0                  1   280   # pipeSection4.pipeMass.l
 -1 2.0000000000000000E-003  0       0                  1   280   # pipeSection4.compressibleVolume.V
 -1 1.0000000000000001E-005  0       0                  1   280   # pipeSection4.compressibleVolume.kappa
 -1       0                  0       0                  2   284   # pipeSection4.compressibleVolume.hydPlug.p
  0       0                  0       0                  3   260   # pipeSection4.compressibleVolume.hydPlug.der(p)
  0       0                  0       0                  6   256   # pipeSection4.pipeFriction.dp
 -1    5000                  0       0                  1   280   # pipeSection4.pipeFriction.k
  0       0                  0       0                  6   388   # pipeSection4.hydPlug_a.v
 -1   10000                  0       0                  1   280   # sine.amplitude
 -1      60                  0       0                  1   280   # sine.freqHz
 -1       0                  0       0                  1   280   # sine.phase
 -1       0                  0       0                  1   280   # sine.offset
 -1       0                  0       0                  1   280   # sine.startTime
  0 3.1415926535897931E+000  0       0                  6  1280   # sine.pi


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(79,40)
relative Pressure [Pa|bar]
[Pa|bar]
[m3/s]
[m3/s2]
[kg/m3|g/cm3]
[m2]
[m]
[m3]
[1/Pa]
relative Pressure [Pa|bar]
der(relative Pressure) [Pa/s]
volume flow [m3/s]
[Pa|bar]
[Pa.m-3.s]
relative Pressure [Pa|bar]
[Pa|bar]
[m3/s]
[m3/s2]
[kg/m3|g/cm3]
[m2]
[m]
[m3]
[1/Pa]
relative Pressure [Pa|bar]
der(relative Pressure) [Pa/s]
volume flow [m3/s]
[Pa|bar]
[Pa.m-3.s]
relative Pressure [Pa|bar]
[Pa|bar]
[m3/s]
[m3/s2]
[kg/m3|g/cm3]
[m2]
[m]
[m3]
[1/Pa]
relative Pressure [Pa|bar]
der(relative Pressure) [Pa/s]
volume flow [m3/s]
[Pa|bar]
[Pa.m-3.s]
relative Pressure [Pa|bar]
volume flow [m3/s]
[Pa|bar]
[m3/s]
[m3/s2]
[kg/m3|g/cm3]
[m2]
[m]
[m3]
[1/Pa]
relative Pressure [Pa|bar]
der(relative Pressure) [Pa/s]
volume flow [m3/s]
[Pa|bar]
[Pa.m-3.s]
relative Pressure [Pa|bar]
volume flow [m3/s]
volume flow [m3/s]
[Pa|bar]
[m3/s]
[m3/s2]
[kg/m3|g/cm3]
[m2]
[m]
[m3]
[1/Pa]
relative Pressure [Pa|bar]
der(relative Pressure) [Pa/s]
[Pa|bar]
[Pa.m-3.s]
volume flow [m3/s]
Amplitude of sine wave
Frequency of sine wave [Hz]
Phase of sine wave [rad|deg]
Offset of output signal
Output = offset for time < startTime [s]


