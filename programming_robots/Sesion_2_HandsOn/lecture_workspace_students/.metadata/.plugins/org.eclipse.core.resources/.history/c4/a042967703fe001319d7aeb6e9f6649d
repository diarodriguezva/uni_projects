package exercises;

import robot.RobotController;

import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.conditionModel.ForceCondition;
import com.kuka.roboticsAPI.conditionModel.ICondition;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.CartDOF;
import com.kuka.roboticsAPI.geometricModel.Frame;
import com.kuka.roboticsAPI.geometricModel.ObjectFrame;
import com.kuka.roboticsAPI.geometricModel.math.CoordinateAxis;
import com.kuka.roboticsAPI.geometricModel.math.Transformation;
import com.kuka.roboticsAPI.geometricModel.math.Vector;
import com.kuka.roboticsAPI.motionModel.BasicMotions;
import com.kuka.roboticsAPI.motionModel.IMotionContainer;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;

public class Exercise5_CollaborationTask extends RoboticsAPIApplication {

	public static void main(String[] args) {
		// initialization
		Exercise5_CollaborationTask app = new Exercise5_CollaborationTask();
		RobotController.initialize(app);
		RobotController.createInfoGui();

		app.run();
	}

	private RobotController robotControl = null;
	private LBR robot = null;
	private ObjectFrame tool = null;

	private CartesianImpedanceControlMode imp;

	private double moveDistance = 50;
	private double forcethreshold = 5;

	@Override
	public void run() {
		robotControl = RobotController.getInstance();
		robot = robotControl.getRobot();
		tool = robotControl.getTool().getDefaultMotionFrame();

		System.out.println("Starting " + this.getClass().getSimpleName());

		// move to start position
		Frame currentFrame = new Frame(Transformation.ofDeg(650, 0, 80, -180, 0, 180));
		tool.move(BasicMotions.lin(currentFrame).setCartVelocity(150));

		// configure impedance control mode
		imp = new CartesianImpedanceControlMode();
		imp.parametrize(CartDOF.TRANSL).setStiffness(1500);
		imp.parametrize(CartDOF.ROT).setStiffness(300);

		imp.setNullSpaceDamping(0.3);
		imp.setNullSpaceStiffness(0);

		// create force condition
		ForceCondition fx = ForceCondition.createNormalForceCondition(null, CoordinateAxis.X, forcethreshold);
		ForceCondition fy = ForceCondition.createNormalForceCondition(null, CoordinateAxis.Y, forcethreshold);
		ICondition cond = fx.or(fy);

		// start first movement
		IMotionContainer activeMove = tool.moveAsync(BasicMotions.lin(currentFrame).setMode(imp));
		IMotionContainer nextMove = null;

		Vector force;
		while (true) {
			// force = robot.getExternalForceTorque(tool).getForce();
			//
			// try {
			// if (Math.abs(force.getX()) > forcethreshold) {
			// currentFrame = new Frame(Transformation.ofTranslation(-Math.signum(force.getX()) * moveDistance, 0,
			// 0).compose(currentFrame.getTransformationProvider().getTransformation()));
			// nextMove = tool.move(BasicMotions.lin(currentFrame).breakWhen(cond));
			// } else if (Math.abs(force.getY()) > forcethreshold) {
			// currentFrame = new Frame(Transformation.ofTranslation(0, Math.signum(force.getY()) * moveDistance,
			// 0).compose(currentFrame.getTransformationProvider().getTransformation()));
			// }
			// nextMove = tool.move(BasicMotions.lin(currentFrame).breakWhen(cond));
			// } catch (Exception e) {
			// System.err.println(e.getMessage());
			// }

			nextMove = tool.move(BasicMotions.lin(currentFrame).breakWhen(cond));
			activeMove.await();
			activeMove = nextMove;

			// if (activeMove.hasFired(cond)) {
			// force = robot.getExternalForceTorque(tool).getForce();
			//
			// if (Math.abs(force.getX()) > forcethreshold) {
			// currentFrame = new Frame(Transformation.ofTranslation(-Math.signum(force.getX()) * moveDistance, 0,
			// 0).compose(currentFrame.getTransformationProvider().getTransformation()));
			// nextMove = tool.move(BasicMotions.lin(currentFrame).breakWhen(cond));
			// } else if (Math.abs(force.getY()) > forcethreshold) {
			// currentFrame = new Frame(Transformation.ofTranslation(0, Math.signum(force.getY()) * moveDistance,
			// 0).compose(currentFrame.getTransformationProvider().getTransformation()));
			// }
			// }

			// ThreadUtil.milliSleep(100);
		}
	}
}
