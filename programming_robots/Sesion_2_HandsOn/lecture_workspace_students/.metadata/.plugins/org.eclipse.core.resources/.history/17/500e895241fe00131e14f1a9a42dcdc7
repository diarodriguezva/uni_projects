package exercises;

import robot.RobotController;

import com.kuka.common.ThreadUtil;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.CartDOF;
import com.kuka.roboticsAPI.geometricModel.Frame;
import com.kuka.roboticsAPI.geometricModel.ObjectFrame;
import com.kuka.roboticsAPI.geometricModel.math.Transformation;
import com.kuka.roboticsAPI.geometricModel.math.Vector;
import com.kuka.roboticsAPI.motionModel.BasicMotions;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;

public class Exercise5_CollaborationTask extends RoboticsAPIApplication {

	public static void main(String[] args) {
		// initialization
		Exercise5_CollaborationTask app = new Exercise5_CollaborationTask();
		RobotController.initialize(app);
		RobotController.createInfoGui();

		app.run();
	}

	private RobotController robotControl = null;
	private LBR robot = null;
	private ObjectFrame tool = null;

	private CartesianImpedanceControlMode imp;

	private double moveDistance = 50;
	private double forceThreshold = 10;

	@Override
	public void run() {
		robotControl = RobotController.getInstance();
		robot = robotControl.getRobot();
		tool = robotControl.getTool().getDefaultMotionFrame();

		System.out.println("Starting " + this.getClass().getSimpleName());

		// move to start position [perviously teached] and define starting direction
		Frame currentFrame = new Frame(Transformation.ofDeg(650, 0, 80, -180, 0, 180));
		tool.move(BasicMotions.lin(currentFrame).setCartVelocity(150));

		// configure impedance control mode
		imp = new CartesianImpedanceControlMode();
		imp.parametrize(CartDOF.TRANSL).setStiffness(5000);
		imp.parametrize(CartDOF.ROT).setStiffness(300);

		imp.setNullSpaceDamping(0.3);
		imp.setNullSpaceStiffness(0);

		Vector force;
		while (true) {
			ThreadUtil.milliSleep(10);
			force = robot.getExternalForceTorque(tool).getForce();

			try {
				double tmp = Math.max(Math.max(Math.abs(force.getX()), Math.abs(force.getY())), Math.abs(force.getZ()));
				if (tmp > forceThreshold) {
					if (tmp == Math.abs(force.getX())) {
						currentFrame = new Frame(currentFrame.getTransformationProvider().getTransformation()
								.compose(Transformation.ofTranslation(Math.signum(force.getX()) * moveDistance, 0, 0)));
					} else if (tmp == Math.abs(force.getY())) {
						currentFrame = new Frame(currentFrame.getTransformationProvider().getTransformation()
								.compose(Transformation.ofTranslation(0, Math.signum(force.getY()) * moveDistance, 0)));
					} else {
						currentFrame = new Frame(currentFrame.getTransformationProvider().getTransformation()
								.compose(Transformation.ofTranslation(0, 0, Math.signum(force.getZ()) * moveDistance)));
					}
				}
				tool.move(BasicMotions.lin(currentFrame));
			} catch (Exception e) {
				System.err.println(e.getMessage());
			}
		}
	}
}
