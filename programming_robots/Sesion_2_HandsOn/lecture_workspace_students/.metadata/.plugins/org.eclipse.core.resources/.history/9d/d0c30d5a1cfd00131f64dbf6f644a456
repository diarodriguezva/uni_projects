package exercises;

import static com.kuka.roboticsAPI.motionModel.BasicMotions.ptp;
import robot.RobotController;

import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.JointPosition;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.motionModel.IMotionContainer;
import com.kuka.roboticsAPI.motionModel.controlModeModel.JointImpedanceControlMode;

public class Exercise3a_JointImpedanceControl extends RoboticsAPIApplication {

	public static void main(String[] args) {
		// initialization
		Exercise3a_JointImpedanceControl app = new Exercise3a_JointImpedanceControl();
		RobotController.initialize(app);

		app.run();
	}

	RobotController robotControl;
	LBR robot;

	@Override
	public void run() {
		robotControl = RobotController.getInstance();
		robot = robotControl.getRobot();
		System.out.println("Starting " + this.getClass().getSimpleName());

		// move robot into a crane position and save configuration as target
		RobotController.getInstance().goFront();
		JointPosition targetPosition = robot.getCurrentJointPosition();

		// create and configure JointImpedanceControlMode
		double stiffness = 50;
		double damping = 0.7;
		JointImpedanceControlMode jointImpMode = new JointImpedanceControlMode(stiffness, stiffness, 0.5 * stiffness,
				0.5 * stiffness, 0.5 * stiffness, 0.25 * stiffness, 0.25 * stiffness);
		jointImpMode.setDamping(damping, damping, damping, damping, damping, damping, damping);

		// start first movement
		IMotionContainer activeMove = robot.moveAsync(ptp(targetPosition).setMode(jointImpMode));
		IMotionContainer nextMove = null;

		// always create a new movement to the target position before the active movement is finished and then wait for
		// the active movement
		while (true) {
			if (!robotControl.getCabinet().getExecutionService().isPaused()) {
				nextMove = robot.moveAsync(ptp(targetPosition).setMode(jointImpMode));
				activeMove.await();
				activeMove = nextMove;
			} else {
				break;
			}
		}

		System.exit(0);
	}

}